// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int        @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String
  username           String
  passwordHash       String
  document           String?
  type               TypeUser
  interests          Interest[]
  profile_img_url    String
  background_img_url String

  // UserInterest  UserInterest[]
  socialNetwork        SocialNetwork[]
  projectAsInfluencer  Job[]           @relation("ProjectAsInfluencer")
  projectAsCompany     Job[]           @relation("ProjectAsCompany")
  proposalAsInfluencer Proposal[]      @relation("ProposalAsInfluencer")
  proposalAsCompany    Proposal[]      @relation("ProposalAsCompany")
  // Negotiations      ProposalNegotiation[]
}

enum TypeUser {
  INFLUENCER
  COMPANY
}

enum Interest {
  CARRO
  ANIMAL
  VIAGEM
  TECNOLOGIA
  MUSICA
  JOGOS
}

model SocialNetwork {
  id        Int     @id @default(autoincrement())
  userId    Int
  name      String
  username  String
  followers Int?
  main      Boolean
  user      User    @relation(fields: [userId], references: [id])
}

// model Interest {
//   id           Int            @id @default(autoincrement())
//   name         String
//   UserInterest UserInterest[]
// }

// model UserInterest {
//   id          Int @id @default(autoincrement())
//   interestId Int
//   userId     Int

//   interest Interest @relation(fields: [interestId], references: [id])
//   user     User     @relation(fields: [userId], references: [id])
// }

model Job {
  id               Int      @id @default(autoincrement())
  proposalId       Int
  influencerId     Int
  companyId        Int
  contractProvider String
  createdAt        DateTime @default(now())

  influencerDelivery String
  companyDelivery    String?
  influencerPayment  String

  proposal   Proposal @relation(fields: [proposalId], references: [id])
  influencer User     @relation("ProjectAsInfluencer", fields: [influencerId], references: [id])
  company    User     @relation("ProjectAsCompany", fields: [companyId], references: [id])
}

model Proposal {
  id Int @id @default(autoincrement())

  message      String
  influencerId Int
  companyId    Int
  createdAt    DateTime       @default(now())
  status       ProposalStatus @default(IN_NEGOCIATION)

  influencer   User                  @relation("ProposalAsInfluencer", fields: [influencerId], references: [id])
  company      User                  @relation("ProposalAsCompany", fields: [companyId], references: [id])
  negotiations ProposalNegotiation[]
  job          Job[]
}

enum ProposalStatus {
  IN_NEGOCIATION
  WAITING_CREATE_PROJECT
  REPROVED
  APPROVED
}

model ProposalNegotiation {
  id         Int @id @default(autoincrement())
  proposalId Int

  message              String?
  influencerDelivery   String
  companyDelivery      String?
  influencerPayment    String
  approvedByInfluencer Boolean?
  approvedByCompany    Boolean?

  createdBy Int
  createdAt DateTime @default(now())

  proposal Proposal @relation(fields: [proposalId], references: [id])
  // user User @relation(fields: [createdBy], references: [id]);
}
