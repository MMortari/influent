// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int             @id @default(autoincrement())
  fistName      String
  lastName      String
  email         String
  username      String
  passwordHash String
  type          String

  UserInterest  UserInterest[]
  SocialNetwork SocialNetwork[]
  ProjectAsInfluencer     Project[]       @relation("ProjectAsInfluencer")
  ProjectAsCompany   Project[]       @relation("ProjectAsCompany")
  ProposalAsInfluencer      Proposal[] @relation("ProposalAsInfluencer")
  ProposalAsCompany      Proposal[] @relation("ProposalAsCompany")
  // Negotiations      ProposalNegotiation[]
}

model SocialNetwork {
  id        Int     @id @default(autoincrement())
  userId   Int
  name      String
  username  String
  followers Int
  main      Boolean
  user      User    @relation(fields: [userId], references: [id])
}

model Interest {
  id           Int            @id @default(autoincrement())
  name         String
  UserInterest UserInterest[]
}

model UserInterest {
  id          Int @id @default(autoincrement())
  interestId Int
  userId     Int

  interest Interest @relation(fields: [interestId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Project {
  id           Int      @id @default(autoincrement())
  influencerId Int
  companyId Int
  contractProvider String
  createdAt    DateTime @default(now())

  influencerDelivery String
  companyDelivery String?
  influencerPayment String

  influencer   User @relation("ProjectAsInfluencer", fields: [influencerId], references: [id])
  company User @relation("ProjectAsCompany", fields: [companyId], references: [id])
}

model Proposal {
  id        Int @id @default(autoincrement())

  message String
  influencerId Int
  companyId Int
  createdAt    DateTime @default(now())
  status ProposalStatus @default(IN_NEGOCIATION)

  influencer User @relation("ProposalAsInfluencer", fields: [influencerId], references: [id])
  company User @relation("ProposalAsCompany", fields: [companyId], references: [id])
  negotiations ProposalNegotiation[]
}

enum ProposalStatus {
  IN_NEGOCIATION
  WAITING_CREATE_PROJECT
  REPROVED
  APPROVED
}

model ProposalNegotiation {
  id Int @id @default(autoincrement())
  proposalId Int

  message String?
  influencerDelivery String
  companyDelivery String?
  influencerPayment String
  approvedByInfluencer Boolean?
  approvedByCompany Boolean?

  createdBy Int
  createdAt    DateTime @default(now())

  proposal Proposal @relation(fields: [proposalId], references: [id])
  // user User @relation(fields: [createdBy], references: [id]);
}